{"version":3,"sources":["reportWebVitals.ts","Components/HeaderArea/RandomWord/RandomWord.tsx","Components/LayoutArea/Header/Header.tsx","Components/LayoutArea/Footer/Footer.tsx","Components/BoardArea/Cell/Cell.tsx","Components/BoardArea/Board/Board.tsx","Components/BoardArea/Game/Game.tsx","Components/LayoutArea/Layout/Layout.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RandomWord","props","state","words","currentWord","Typography","variant","className","this","setInterval","index","findIndex","word","setState","Component","Header","Footer","Cell","drawSymbol","symbol","onClick","id","cellId","toString","computerMove","Board","list","boardLock","timerId","opponentHasSeries","opponentMoves","i","length","option","checkCloseToWin","checkBlockingUser","userMoves","computerPlay","cellNumber","a","markedCellsArr","XisNext","computerMoves","window","setTimeout","computerMarkedCells","victoryOpportunity","Promise","res","rej","selectedBlockingCell","randomElement","getRandomCell","nextMove","selectedCellByUser","includes","hasWinner","calcScore","alert","startNewGame","Array","randomNum","Math","floor","random","optionalArr","filter","element","blockingCellNumber","find","e","playerMarks","firstCell","secondCell","thirdCell","checkWinningPoints","map","Button","color","Game","Layout","style","minHeight","Grid","container","direction","alignItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,sDC4BCQ,E,kDA3BX,WAAmBC,GAAY,IAAD,8BAC1B,cAAMA,IACDC,MAAQ,CAClBC,MAAO,CAAC,MAAM,MAAM,OACXC,YAAa,OAJS,E,0CAQ9B,WACI,OACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,aAAnC,SACI,+BAAOC,KAAKN,MAAME,kB,+BAK9B,WAAkC,IAAD,OAC7BK,aAAY,WACR,IAAMC,EAAQ,EAAKR,MAAMC,MAAMQ,WAAU,SAAAC,GAAI,OAAIA,IAAS,EAAKV,MAAME,eACrE,EAAKS,SAAS,CACVT,YAAa,EAAKF,MAAMC,OAAOO,EAAQ,GAAK,OAEjD,U,GAxBcI,a,MCCVC,MAPf,WACI,OACI,qBAAKR,UAAU,aAAf,SACL,cAAC,EAAD,O,MCKYS,MARf,WACI,OACI,cAACX,EAAA,EAAD,CAAYC,QAAQ,YAAYC,UAAU,SAA1C,6D,gDC2BOU,E,kDApBX,WAAmBhB,GAAiB,IAAD,8BAC/B,cAAMA,IAIFiB,WAAa,WACd,EAAKhB,MAAMiB,QAJd,EAAKjB,MAAQ,CAAEiB,OAAQ,IAFQ,E,0CAWnC,WACI,OACI,qBAAKC,QAASZ,KAAKU,WAAYG,GAAIb,KAAKP,MAAMqB,OAAOC,WAArD,SACKf,KAAKP,MAAMuB,mB,GAfTV,a,gBCwNJW,E,kDApMX,WAAmBxB,GAAY,IAAD,8BAC1B,cAAMA,IAdFyB,KAAO,CACX,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAKmB,EAHtBC,WAAY,EAGU,EAFtBC,QAAU,EAEY,EAsCtBC,kBAAoB,SAACC,GACzB,IAAI,IAAIC,EAAI,EAAGA,GAAKD,EAAcE,OAAQD,IAAK,CAAC,IAAD,gBACzB,EAAKL,MADoB,IAC3C,IAAI,EAAJ,qBAA6B,CAAC,IAAtBO,EAAqB,QACzB,GAAG,EAAKC,gBAAgBD,EAAQH,GAC5B,OAAO,GAH4B,+BAO/C,OAAO,GA9CmB,EAgDtBK,kBAAoB,WACxB,QAAG,EAAKN,kBAAkB,EAAK3B,MAAMkC,YAjDX,EAsDtBC,aAtDsB,uCAsDP,WAAOC,GAAP,SAAAC,EAAA,sEACb,EAAK1B,SAAS,CAChB2B,eAAe,GAAD,mBAAM,EAAKtC,MAAMsC,gBAAjB,CAAiCF,IAC/CG,SAAS,EACTC,cAAc,GAAD,mBAAM,EAAKxC,MAAMwC,eAAjB,CAAgCJ,MAJ9B,gCAKZK,OAAOC,YAAW,WACrB,EAAK1C,MAAM2C,oBAAoBP,GAAc,IAC7C,EAAKzB,SAAS,CACd4B,SAAS,MAEV,MAVgB,2CAtDO,wDAmEtBK,mBAAqB,WACzB,QAAG,EAAKjB,kBAAkB,EAAK3B,MAAMwC,gBApEX,EAyEtBlB,aAAe,WACnB,OAAO,IAAIuB,SAAc,SAACC,EAAKC,GAC3B,GAAG,EAAKH,qBACJ,EAAKT,aAAa,EAAKnC,MAAMgD,sBAC7BF,SAEC,GAAG,EAAKb,oBACT,EAAKE,aAAa,EAAKnC,MAAMgD,sBAC7BF,QAEC,CACD,IAAMG,EAAgB,EAAKC,gBAO3B,EAAKvC,SAAS,CACV2B,eAAe,GAAD,mBAAM,EAAKtC,MAAMsC,gBAAjB,CAAiCW,IAC/CV,SAAS,EACTC,cAAc,GAAD,mBAAM,EAAKxC,MAAMwC,eAAjB,CAAgCS,MATpC,kBAAMR,OAAOC,YAAW,WACjC,EAAK1C,MAAM2C,oBAAoBM,GAAiB,IAChD,EAAKtC,SAAS,CACV4B,SAAS,IACV,kBAAMO,SACV,aA1Fe,EAsGvBK,SAtGuB,uCAsGZ,WAAOC,GAAP,SAAAf,EAAA,0DACX,EAAKZ,UADM,oDAId,EAAKA,WAAY,EACZ,EAAKzB,MAAMuC,UAAW,EAAKvC,MAAMsC,eAAee,SAASD,GALhD,iEAQR,EAAKzC,SAAS,CAAC4B,SAAS,IARhB,cASd,EAAKvC,MAAM2C,oBAAoBS,GAAsB,IATvC,UAUR,EAAKzC,SAAS,CAChB2B,eAAe,GAAD,mBAAM,EAAKtC,MAAMsC,gBAAjB,CAAiCc,IAC/ClB,UAAU,GAAD,mBAAM,EAAKlC,MAAMkC,WAAjB,CAA4BkB,MAZ3B,YAeX,EAAKpD,MAAMsD,UAfA,uDAkBX,EAAKC,UAAU,EAAKvD,MAAMkC,WAlBf,wBAmBVQ,YAAW,WACPc,MAAM,aACN,KArBM,8BA/HK,IAuJV,EAAKxD,MAAMsC,eAAeR,OAxBrB,wBAyBVY,YAAW,WACPc,MAAM,UACN,KA3BM,2BA+BV,EAAKlC,eAAe9B,MAAK,SAAAsD,GAAG,OAAI,EAAKrB,WAAY,KAC9C,EAAK8B,UAAU,EAAKvD,MAAMwC,eACzBE,YAAW,WACP,EAAK/B,SAAS,CAAC4B,SAAS,IACxBiB,MAAM,kBACN,MAGJ,EAAK7C,SAAS,CAAC4B,SAAS,IAvClB,4CAtGY,wDAqKtBkB,aAAe,WACnB,EAAKhC,WAAY,EACjB,EAAKd,SAAS,CACV2B,eAAgB,GAChBC,SAAS,EACTI,oBAAqB,IAAIe,MAAc,GACvCxB,UAAW,GACXM,cAAe,GACfc,WAAW,EACXN,qBAAsB,MA5K1B,EAAKhD,MAAQ,CACTsC,eAAgB,GAChBC,SAAS,EACTI,oBAAqB,IAAIe,MAAc,GACvCxB,UAAW,GACXM,cAAe,GACfc,WAAW,EACXN,qBAAsB,IATA,E,iDAa9B,WACI,IAAIW,EACJ,GACIA,EAAYC,KAAKC,MAzCF,EAyCQD,KAAKE,gBACvBxD,KAAKN,MAAMsC,eAAee,SAASM,IAC5C,OAAOA,I,6BAGX,SAAwB5B,EAAkBH,GACtC,IAAImC,EAAc,CAAChC,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAC1CG,EAAYN,EAAcoC,QAAO,SAAAC,GAAO,OAAIF,EAAYV,SAASY,MACvE,GAAwB,IAArB/B,EAAUJ,OAAa,CACtB,IAAMoC,EAAqBH,EAAYI,MAAK,SAAAF,GAAO,OAAKA,IAAY/B,EAAU,IAAM+B,IAAY/B,EAAU,MAC1G,IAAIgC,EAAoB,OAAO,EAE/B,IADkB5D,KAAKN,MAAMsC,eAAe6B,MAAK,SAAAC,GAAC,OAAIA,IAAMF,KAKxD,OAHA5D,KAAKK,SAAS,CACVqC,qBAAsBkB,KAEnB,EAGf,OAAO,I,gCA+GX,SAA2BH,EAAuBM,GAC9C,IAAIC,EAAYP,EAAY,GAAIQ,EAAaR,EAAY,GAAIS,EAAYT,EAAY,GACrF,SAAGM,EAAYhB,SAASiB,IAAcD,EAAYhB,SAASkB,IAAeF,EAAYhB,SAASmB,M,uBAMnG,SAAkB5C,GACd,IAAI,IAAIC,EAAI,EAAGA,GAAKD,EAAcE,OAAQD,IAAK,CAAC,IAAD,gBACzBvB,KAAKkB,MADoB,IAC3C,IAAI,EAAJ,qBAA6B,CAAC,IAAtBO,EAAqB,QACzB,GAAGzB,KAAKmE,mBAAmB1C,EAAQH,GAC/B,OAAO,GAH4B,+BAO/C,OAAO,I,oBAgBX,WAA8B,IAAD,OACzB,OACI,qCACI,sBAAKvB,UAAU,YAAf,UACM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGqE,KAAI,SAAA7C,GAAC,OAC/B,qBAAaxB,UAAU,OAAOa,QAAS,kBAAM,EAAKiC,SAAStB,IAA3D,SACI,cAAC,EAAD,CAAMT,OAAQS,EACVP,aAAc,EAAKtB,MAAM2C,oBAAoBd,MAF3CA,MAKd,cAAC8C,EAAA,EAAD,CAAQtE,UAAU,gBAAgBD,QAAQ,YAAYwE,MAAM,UAAU1D,QAAS,kBAAM,EAAKuC,gBAA1F,gCAEE,8B,GA5MF7C,aCDLiE,E,4JATX,WACI,OACI,mCACI,cAAC,EAAD,U,GANGjE,a,QCyBJkE,MApBf,WAII,OACI,mCACI,sBAAKzE,UAAU,aAAa0E,MALlB,CACdC,UAAW,SAIP,UACI,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,CAAMC,WAAS,EACXC,UAAU,SACVC,WAAW,SAFf,SAII,+BAAM,cAAC,EAAD,QAEV,cAAC,EAAD,UCjBhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1BpG,M","file":"static/js/main.9289a5cc.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Component } from \"react\";\nimport \"./RandomWord.css\";\nimport { Typography } from \"@material-ui/core\";\ninterface RandomWordState {\n\twords: string[];\n    currentWord: string;\n}\n\nclass RandomWord extends Component<{}, RandomWordState> {\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = {\n\t\t\twords: [\"Tic\",\"Tac\",\"Toe\"],\n            currentWord: \"Tic\"\n        };\n    }\n\n    public render(): JSX.Element {\n        return (\n            <Typography variant=\"h3\" className=\"randomWord\">\n                <span>{this.state.currentWord}</span>\n            </Typography>\n        );\n    }\n    \n    public componentDidMount(): void {\n        setInterval(() => {\n            const index = this.state.words.findIndex(word => word === this.state.currentWord);\n            this.setState({\n                currentWord: this.state.words[(index + 1) % 3]\n            })\n        }, 1500)\n    }\n    \n}\n\nexport default RandomWord;\n","import RandomWord from \"../../HeaderArea/RandomWord/RandomWord\";\nimport \"./Header.css\";\nfunction Header(): JSX.Element {\n    return (\n        <div className=\"header Box\">\n\t\t\t<RandomWord />\n        </div>\n    );\n}\nexport default Header;\n","import \"./Footer.css\";\nimport { Typography } from \"@material-ui/core\";\nfunction Footer(): JSX.Element {\n    return (\n        <Typography variant=\"subtitle2\" className=\"footer\">\n            Copyright Â© ron_elli - All rights reserved.\n        </Typography>\n    );\n}\n\nexport default Footer;\n","import { Component } from \"react\";\n\ninterface CellState {\n    symbol: string;\n}\n\ninterface CellProps {\n    computerMove?: string,\n    cellId: number\n}\nclass Cell extends Component<CellProps,CellState> {\n    public constructor(props:CellProps){\n        super(props);\n        this.state = { symbol: \"\" };\n    }\n    \n    private drawSymbol = () => {\n        if(this.state.symbol !== \"\"){\n            return;\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div onClick={this.drawSymbol} id={this.props.cellId.toString()}>\n                {this.props.computerMove }\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import { Component } from \"react\";\nimport Cell from \"../Cell/Cell\";\nimport \"./Board.css\";\nimport { Button } from '@material-ui/core';\n\nconst MAX_CELLS_IN_BOARD = 9;\ninterface BoardState {\n    markedCellsArr: number[],\n    XisNext: boolean,\n    computerMarkedCells: string[],\n    userMoves: number[],\n    computerMoves: number[],\n    hasWinner: boolean,\n    selectedBlockingCell: number\n}\n\nclass Board extends Component<{}, BoardState> {\n    private list = [\n        [0, 1, 2], \n        [3, 4, 5], \n        [6, 7, 8],\n        [0, 3 ,6],\n        [1, 4, 7], \n        [2, 5, 8], \n        [0, 4, 8], \n        [2, 4, 6]\n    ];\n    private boardLock = false;\n    private timerId = 0;\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = {\n            markedCellsArr: [],\n            XisNext: true,\n            computerMarkedCells: new Array<string>(9),\n            userMoves: [],\n            computerMoves: [],\n            hasWinner: false,\n            selectedBlockingCell: 10\n        }\n    }\n\n    private getRandomCell(): number {\n        let randomNum;\n        do {\n            randomNum = Math.floor(Math.random() * (MAX_CELLS_IN_BOARD))\n        } while (this.state.markedCellsArr.includes(randomNum));\n        return randomNum;\n    }\n\n    private checkCloseToWin(option: number[], opponentMoves: number[]) { \n        let optionalArr = [option[0], option[1], option[2]];\n        const userMoves = opponentMoves.filter(element => optionalArr.includes(element));\n        if(userMoves.length === 2){\n            const blockingCellNumber = optionalArr.find(element => (element !== userMoves[0] && element !== userMoves[1]));\n            if(!blockingCellNumber) return false;\n            const hasMarked = this.state.markedCellsArr.find(e => e === blockingCellNumber);\n            if(!hasMarked){\n                this.setState({\n                    selectedBlockingCell: blockingCellNumber\n                });\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private opponentHasSeries = (opponentMoves: number[]) => {\n        for(let i = 2; i <= opponentMoves.length; i++) {\n            for(let option of this.list) {\n                if(this.checkCloseToWin(option, opponentMoves)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    } \n    private checkBlockingUser = () => {\n        if(this.opponentHasSeries(this.state.userMoves)){\n            return true;\n        }\n        return false;\n    }\n    private computerPlay = async (cellNumber: number ) => {\n        await this.setState({\n            markedCellsArr: [...this.state.markedCellsArr, cellNumber],\n            XisNext: true,\n            computerMoves: [...this.state.computerMoves, cellNumber]});\n        return window.setTimeout(() => {\n            this.state.computerMarkedCells[cellNumber] = \"O\";\n            this.setState({\n            XisNext: true\n            })\n        }, 1000);\n    }\n\n    private victoryOpportunity = () => {\n        if(this.opponentHasSeries(this.state.computerMoves)){\n            return true;\n        }\n        return false;\n    }\n    private computerMove = () => {\n        return new Promise<void>((res, rej) => {\n            if(this.victoryOpportunity()){\n                this.computerPlay(this.state.selectedBlockingCell);\n                res();\n            }\n            else if(this.checkBlockingUser()){\n                this.computerPlay(this.state.selectedBlockingCell);\n                res();\n            }\n            else {\n                const randomElement = this.getRandomCell();\n                const last = () => window.setTimeout(() => {\n                    this.state.computerMarkedCells[randomElement] = \"O\";\n                    this.setState({\n                        XisNext: true\n                    }, () => res())\n                }, 1000);\n                this.setState({\n                    markedCellsArr: [...this.state.markedCellsArr, randomElement],\n                    XisNext: true,\n                    computerMoves: [...this.state.computerMoves, randomElement]\n                }, last);\n                \n            }\n        })\n\n    }\n\n    public nextMove = async (selectedCellByUser: number) => {\n        if(this.boardLock) {\n            return;\n        }\n        this.boardLock = true;\n        if (!this.state.XisNext || this.state.markedCellsArr.includes(selectedCellByUser)) {\n            return;\n        }\n        await this.setState({XisNext: false});\n        this.state.computerMarkedCells[selectedCellByUser] = \"X\";\n        await this.setState({\n            markedCellsArr: [...this.state.markedCellsArr, selectedCellByUser],\n            userMoves: [...this.state.userMoves, selectedCellByUser],\n        });\n\n        if(this.state.hasWinner) {\n            return;\n        }\n        if(this.calcScore(this.state.userMoves)){\n            setTimeout(() => {\n                alert(\"You Win\");\n            }, (500));\n            return;\n        }\n        else if (this.state.markedCellsArr.length === MAX_CELLS_IN_BOARD) {\n            setTimeout(() => {\n                alert(\"Draw\");\n            }, (500));\n            return;\n        }\n        else {\n            this.computerMove().then(res => this.boardLock = false);\n            if(this.calcScore(this.state.computerMoves)){\n                setTimeout(() => {\n                    this.setState({XisNext: false})\n                    alert(\"Computer Won\");\n                }, (1500));\n            }\n            else {\n                this.setState({XisNext: true})\n            }\n        }\n\n    }\n    private checkWinningPoints(optionalArr: number[], playerMarks: number[]): boolean {\n        let firstCell = optionalArr[0], secondCell = optionalArr[1], thirdCell = optionalArr[2];\n        if(playerMarks.includes(firstCell) && playerMarks.includes(secondCell) && playerMarks.includes(thirdCell)){\n            return true;\n        }\n        return false;\n    }\n\n    private calcScore(opponentMoves: number[]) {\n        for(let i = 3; i <= opponentMoves.length; i++) {\n            for(let option of this.list) {\n                if(this.checkWinningPoints(option, opponentMoves)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private startNewGame = () => {\n        this.boardLock = false;\n        this.setState({\n            markedCellsArr: [],\n            XisNext: true,\n            computerMarkedCells: new Array<string>(9),\n            userMoves: [],\n            computerMoves: [],\n            hasWinner: false,\n            selectedBlockingCell: 10\n        });\n    }\n\n    public render(): JSX.Element {\n        return (\n            <>\n                <div className=\"board Box\">\n                    { [0, 1, 2, 3, 4, 5, 6, 7, 8].map(i =>\n                        <div key={i} className=\"cell\" onClick={() => this.nextMove(i)}>\n                            <Cell cellId={i}\n                                computerMove={this.state.computerMarkedCells[i]}/>\n                        </div>)\n                    }\n                    <Button className=\"newGameButton\" variant=\"contained\" color=\"primary\" onClick={() => this.startNewGame()}> Start new game\n                    </Button>\n                </div><hr />\n            </>\n        );\n    }\n}\n\nexport default Board;\n","import { Component } from \"react\";\nimport Board from \"../Board/Board\";\n\nclass Game extends Component {\n\n\n    public render(): JSX.Element {\n        return (\n            <>\n                <Board />\n            </>\n        );\n    }\n}\n\nexport default Game;\n","import Header from \"../Header/Header\";\nimport Footer from \"../Footer/Footer\";\nimport \"./Layout.css\";\nimport Game from \"../../BoardArea/Game/Game\";\nimport { Grid } from \"@material-ui/core\";\n\n\n\nfunction Layout(): JSX.Element {\n    const rootStyle = {\n        minHeight: '100vh'\n    };\n    return (\n        <>\n            <div className=\"Layout Box\" style={rootStyle} >\n                <Header />\n                <Grid container \n                    direction=\"column\"\n                    alignItems=\"center\"\n                >\n                    <main><Game /></main>\n                </Grid>\n                <Footer />\n            </div>\n        </>\n    );\n}\n\nexport default Layout;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Layout from \"../src/Components/LayoutArea/Layout/Layout\";\nReactDOM.render(\n  <React.StrictMode>\n      <Layout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}