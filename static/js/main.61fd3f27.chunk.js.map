{"version":3,"sources":["reportWebVitals.ts","Components/HeaderArea/RandomWord/RandomWord.tsx","Components/LayoutArea/Header/Header.tsx","Components/LayoutArea/Footer/Footer.tsx","Components/BoardArea/Cell/Cell.tsx","Components/BoardArea/Board/Board.tsx","Components/BoardArea/Game/Game.tsx","Components/LayoutArea/Layout/Layout.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RandomWord","props","state","words","currentWord","Typography","variant","className","this","setInterval","index","findIndex","word","setState","Component","Header","Footer","Cell","drawSymbol","symbol","onClick","id","cellId","toString","computerMove","Board","list","timerId","opponentHasSeries","opponentMoves","i","length","option","checkCloseToWin","checkBlockingUser","userMoves","computerPlay","cellNumber","a","markedCellsArr","XisNext","computerMoves","window","setTimeout","computerMarkedCells","victoryOpportunity","selectedBlockingCell","randomElement","getRandomCell","nextMove","selectedCellByUser","includes","console","log","hasWinner","calcScore","alert","startNewGame","Array","randomNum","Math","floor","random","optionalArr","filter","element","blockingCellNumber","find","e","playerMarks","firstCell","secondCell","thirdCell","checkWinningPoints","map","xIsNext","Button","color","Game","Layout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61fd3f27.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Component } from \"react\";\nimport \"./RandomWord.css\";\nimport { Typography } from \"@material-ui/core\";\ninterface RandomWordState {\n\twords: string[];\n    currentWord: string;\n}\n\nclass RandomWord extends Component<{}, RandomWordState> {\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = {\n\t\t\twords: [\"Tic\",\"Tac\",\"Toe\"],\n            currentWord: \"Tic\"\n        };\n    }\n\n    public render(): JSX.Element {\n        return (\n            <Typography variant=\"h3\" className=\"randomWord\">\n                <span>{this.state.currentWord}</span>\n            </Typography>\n        );\n    }\n    \n    public componentDidMount(): void {\n        setInterval(() => {\n            const index = this.state.words.findIndex(word => word === this.state.currentWord);\n            this.setState({\n                currentWord: this.state.words[(index + 1) % 3]\n            })\n        }, 1500)\n    }\n    \n}\n\nexport default RandomWord;\n","import RandomWord from \"../../HeaderArea/RandomWord/RandomWord\";\n\nfunction Header(): JSX.Element {\n    return (\n        <div className=\"Header Box\">\n\t\t\t<h1><RandomWord /></h1>\n        </div>\n    );\n}\nexport default Header;\n","import \"./Footer.css\";\nimport { Typography } from \"@material-ui/core\";\nfunction Footer(): JSX.Element {\n    return (\n        <Typography variant=\"subtitle2\" className=\"footer\">\n            Copyright Â© ron_elli - All rights reserved.\n        </Typography>\n    );\n}\n\nexport default Footer;\n","import { Component } from \"react\";\n\ninterface CellState {\n    symbol: string;\n}\n\ninterface CellProps {\n    computerMove?: string,\n    cellId: number,\n    xIsNext: boolean\n}\nclass Cell extends Component<CellProps,CellState> {\n    public constructor(props:CellProps){\n        super(props);\n        this.state = { symbol: \"\" };\n    }\n    \n    private drawSymbol = () => {\n        if(this.state.symbol !== \"\"){\n            return;\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"cell\" onClick={this.drawSymbol} id={this.props.cellId.toString()}>\n                {this.props.computerMove }\n            </div>\n        );\n    }\n}\n\nexport default Cell;\n","import { Component } from \"react\";\nimport Cell from \"../Cell/Cell\";\nimport \"./Board.css\";\nimport { Button } from '@material-ui/core';\n\nconst MAX_CELLS_IN_BOARD = 9;\ninterface BoardState {\n    markedCellsArr: number[],\n    XisNext: boolean,\n    computerMarkedCells: string[],\n    userMoves: number[],\n    computerMoves: number[],\n    hasWinner: boolean,\n    selectedBlockingCell: number\n}\n\nclass Board extends Component<{}, BoardState> {\n    private list = [\n        [0, 1, 2], \n        [3, 4, 5], \n        [6, 7, 8],\n        [0, 3 ,6],\n        [1, 4, 7], \n        [2, 5, 8], \n        [0, 4, 8], \n        [2, 4, 6]\n    ];\n    private timerId = 0;\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = {\n            markedCellsArr: [],\n            XisNext: true,\n            computerMarkedCells: new Array<string>(9),\n            userMoves: [],\n            computerMoves: [],\n            hasWinner: false,\n            selectedBlockingCell: 10\n        }\n    }\n\n    private getRandomCell(): number {\n        let randomNum;\n        do {\n            randomNum = Math.floor(Math.random() * (MAX_CELLS_IN_BOARD))\n        } while (this.state.markedCellsArr.includes(randomNum));\n        return randomNum;\n    }\n\n    private checkCloseToWin(option: number[], opponentMoves: number[]) { \n        let optionalArr = [option[0], option[1], option[2]];\n        const userMoves = opponentMoves.filter(element => optionalArr.includes(element));\n        if(userMoves.length === 2){\n            const blockingCellNumber = optionalArr.find(element => (element !== userMoves[0] && element !== userMoves[1]));\n            if(!blockingCellNumber) return false;\n            const hasMarked = this.state.markedCellsArr.find(e => e === blockingCellNumber);\n            if(!hasMarked){\n                this.setState({\n                    selectedBlockingCell: blockingCellNumber\n                });\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private opponentHasSeries = (opponentMoves: number[]) => {\n        for(let i = 2; i <= opponentMoves.length; i++) {\n            for(let option of this.list) {\n                if(this.checkCloseToWin(option, opponentMoves)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    } \n    private checkBlockingUser = () => {\n        if(this.opponentHasSeries(this.state.userMoves)){\n            return true;\n        }\n        return false;\n    }\n    private computerPlay = async (cellNumber: number ) => {\n        await this.setState({\n            markedCellsArr: [...this.state.markedCellsArr, cellNumber],\n            XisNext: true,\n            computerMoves: [...this.state.computerMoves, cellNumber]});\n        window.setTimeout(() => {\n            this.state.computerMarkedCells[cellNumber] = \"O\";\n            this.setState({\n            XisNext: true\n            })\n        }, 1000);\n    }\n\n    private victoryOpportunity = () => {\n        if(this.opponentHasSeries(this.state.computerMoves)){\n            return true;\n        }\n        return false;\n    }\n    private computerMove = async () => {\n        if(this.victoryOpportunity()){\n            this.computerPlay(this.state.selectedBlockingCell);\n        }\n        else if(this.checkBlockingUser()){\n            this.computerPlay(this.state.selectedBlockingCell);\n        }\n        else {\n            const randomElement = this.getRandomCell();\n            await this.setState({\n                    markedCellsArr: [...this.state.markedCellsArr, randomElement],\n                    XisNext: true,\n                    computerMoves: [...this.state.computerMoves, randomElement]});\n            window.setTimeout(() => {\n                this.state.computerMarkedCells[randomElement] = \"O\";\n                this.setState({\n                //     markedCellsArr: [...this.state.markedCellsArr, randomElement],\n                    XisNext: true\n                //     computerMoves: [...this.state.computerMoves, randomElement]\n                })\n            }, 1000);\n        }\n    }\n\n    public nextMove = async (selectedCellByUser: number) => {\n        if (!this.state.XisNext || this.state.markedCellsArr.includes(selectedCellByUser)) {\n            return;\n        }\n        await this.setState({XisNext: false}, ()=> console.log(this.state.XisNext));\n        this.state.computerMarkedCells[selectedCellByUser] = \"X\";\n        await this.setState({\n            markedCellsArr: [...this.state.markedCellsArr, selectedCellByUser],\n            userMoves: [...this.state.userMoves, selectedCellByUser],\n        });\n\n        if(this.state.hasWinner) {\n            return;\n        }\n        if(this.calcScore(this.state.userMoves)){\n            setTimeout(() => {\n                alert(\"You Win\");\n            }, (500));\n            return;\n        }\n        else if (this.state.markedCellsArr.length === MAX_CELLS_IN_BOARD) {\n            setTimeout(() => {\n                alert(\"Draw\");\n            }, (500));\n            return;\n        }\n        else {\n            this.computerMove();\n            if(this.calcScore(this.state.computerMoves)){\n                setTimeout(() => {\n                    this.setState({XisNext: false})\n                    alert(\"Computer Won\");\n                }, (1500));\n            }\n            else {\n                this.setState({XisNext: true})\n            }\n        }\n\n    }\n    private checkWinningPoints(optionalArr: number[], playerMarks: number[]): boolean {\n        let firstCell = optionalArr[0], secondCell = optionalArr[1], thirdCell = optionalArr[2];\n        if(playerMarks.includes(firstCell) && playerMarks.includes(secondCell) && playerMarks.includes(thirdCell)){\n            return true;\n        }\n        return false;\n    }\n\n    private calcScore(opponentMoves: number[]) {\n        for(let i = 3; i <= opponentMoves.length; i++) {\n            for(let option of this.list) {\n                if(this.checkWinningPoints(option, opponentMoves)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private startNewGame = () => {\n        this.setState({\n            markedCellsArr: [],\n            XisNext: true,\n            computerMarkedCells: new Array<string>(9),\n            userMoves: [],\n            computerMoves: [],\n            hasWinner: false,\n            selectedBlockingCell: 10\n        });\n    }\n\n    public render(): JSX.Element {\n        return (\n            <>\n                <div className=\"board Box\">\n                    { [0, 1, 2, 3, 4, 5, 6, 7, 8].map(i =>\n                        <div key={i} className=\"cell\" onClick={() => this.nextMove(i)}>\n                            <Cell cellId={i}\n                                computerMove={this.state.computerMarkedCells[i]} xIsNext={this.state.XisNext}/>\n                        </div>)\n                    }\n                </div><hr />\n                \n                <Button variant=\"contained\" color=\"primary\" className=\"Game\" onClick={() => this.startNewGame()}> Start new game\n                </Button>\n            </>\n        );\n    }\n}\n\nexport default Board;\n","import { Component } from \"react\";\nimport Board from \"../Board/Board\";\n\nclass Game extends Component {\n\n\n    public render(): JSX.Element {\n        return (\n            <>\n                <Board />\n            </>\n        );\n    }\n}\n\nexport default Game;\n","import Header from \"../Header/Header\";\nimport Footer from \"../Footer/Footer\";\nimport \"./Layout.css\";\nimport Game from \"../../BoardArea/Game/Game\";\n\nfunction Layout(): JSX.Element {\n    return (\n        <div className=\"Layout Box\">\n\t\t\t<Header />\n            <main><Game /></main>\n            <Footer />\n        </div>\n    );\n}\n\nexport default Layout;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Layout from \"../src/Components/LayoutArea/Layout/Layout\";\nReactDOM.render(\n  <React.StrictMode>\n      <Layout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}